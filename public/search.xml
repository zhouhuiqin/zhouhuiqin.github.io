<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GitHub Hexo - hexo指令</title>
      <link href="2021/08/16/GitHub%20Hexo%20-%20hexo%E6%8C%87%E4%BB%A4/"/>
      <url>2021/08/16/GitHub%20Hexo%20-%20hexo%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：记录下常用的hexo指令和踩过的坑~</p><a id="more"></a></blockquote><h4 id="hexo指令"><a class="markdownIt-Anchor" href="#hexo指令"></a> Hexo指令</h4><h5 id="1-新建一篇文章"><a class="markdownIt-Anchor" href="#1-新建一篇文章"></a> 1、新建一篇文章</h5><ul><li>方法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">new</span> [layout] &lt;title&gt;</div></pre></td></tr></table></figure><ul><li>栗子：新建本篇文章（标题包含空格时，需要使用引号括起来）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">new</span> <span class="string">"GitHub Hexo - hexo指令"</span></div></pre></td></tr></table></figure><h5 id="2-清除缓存文件"><a class="markdownIt-Anchor" href="#2-清除缓存文件"></a> 2、清除缓存文件</h5><ul><li>方法与栗子</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure><h5 id="3-生成静态文件"><a class="markdownIt-Anchor" href="#3-生成静态文件"></a> 3、生成静态文件</h5><ul><li>方法与栗子①（g，generate的缩写）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure><ul><li>栗子②：文件生成后立即部署网站</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g -d</div></pre></td></tr></table></figure><ul><li>栗子③：文件生成时日志打印（此时，在博客根目录下可见debug.log文件）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g --debug</div></pre></td></tr></table></figure><h5 id="4-启动本地服务预览"><a class="markdownIt-Anchor" href="#4-启动本地服务预览"></a> 4、启动本地服务（预览）</h5><ul><li>方法与栗子（默认情况下，访问网址为： <code>http://localhost:4000/</code>）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure><h5 id="5-部署网站"><a class="markdownIt-Anchor" href="#5-部署网站"></a> 5、部署网站</h5><ul><li>方法与栗子</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure><p><i>指导文档：<a href="https://hexo.io/zh-cn/docs/commands" target="_blank">Hexo官方指令</a>    </i></p><h4 id="坑坑坑坑"><a class="markdownIt-Anchor" href="#坑坑坑坑"></a> 坑坑坑坑</h4><h5 id="坑一hexo-g生成的静态文件为0kb"><a class="markdownIt-Anchor" href="#坑一hexo-g生成的静态文件为0kb"></a> 坑一：hexo g生成的静态文件为0kb</h5><h6 id="现象"><a class="markdownIt-Anchor" href="#现象"></a> 现象</h6><p>hexo g --debug，可见错误如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(node:3908) Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency</div><div class="line">(Use `node --trace-warnings ...` to show where the warning was created)</div><div class="line">(node:3908) Warning: Accessing non-existent property 'column' of module exports inside circular dependency</div><div class="line">(node:3908) Warning: Accessing non-existent property 'filename' of module exports inside circular dependency</div><div class="line">(node:3908) Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency</div><div class="line">(node:3908) Warning: Accessing non-existent property 'column' of module exports inside circular dependency</div><div class="line">(node:3908) Warning: Accessing non-existent property 'filename' of module exports inside circular dependency</div></pre></td></tr></table></figure><h6 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h6><p>node版本过高，与旧hexo不兼容；且非稳定版本</p><p>原使用node版本：14.17.3</p><p>需降低node版本：12.22.5</p><p>👉<a href="https://nodejs.org/zh-cn/about/releases/" target="_blank">node稳定版</a></p><h6 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h6><p>使用稳定版本的node，如果不想卸载原版本的话（会有其他应用依赖高版本node的情况），可以安装nvm，实现多版本的node切换。</p><p>指导文档：<a href="https://blog.csdn.net/gitchatxiaomi/article/details/108965496" target="_blank">解决项目node版本不支持，windows多版本的node切换</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nvm ls               <span class="comment">// 查看已安装node版本</span></div><div class="line">nvm install vXX      <span class="comment">// 安装对应XXX版本的node</span></div><div class="line">nvm uninstall vXX    <span class="comment">// 卸载对应XXX版本的node</span></div><div class="line">nvm use xxx          <span class="comment">// 选择使用XXX版本</span></div></pre></td></tr></table></figure><h5 id="坑二修改文件夹名称小写大写提交后名称依旧未变"><a class="markdownIt-Anchor" href="#坑二修改文件夹名称小写大写提交后名称依旧未变"></a> 坑二：修改文件夹名称（小写↔大写），提交后名称依旧未变</h5><h6 id="原因-2"><a class="markdownIt-Anchor" href="#原因-2"></a> 原因</h6><p>git 命令默认的配置中忽略了文件名的大小写</p><h6 id="解决-2"><a class="markdownIt-Anchor" href="#解决-2"></a> 解决</h6><p>修改git的配置文件，让git执行时不要忽略大小写的修改。</p><ol><li>步骤1：进入到博客根目录</li><li>步骤2：找到.deploy_git文件夹（隐藏文件夹，度娘查如何显示文件）</li><li>步骤3：找到.git文件夹</li><li>步骤4：修改config文件里的 ignorecase = true 为 ignorecase = false，保存文件</li><li>步骤5：删除.deploy_git文件夹内的所有文件，并push到 Github 仓库（确保你的远程仓库内没有任何文件）</li><li>步骤6：执行hexo指令：hexo clean、hexo g -d</li></ol><p>指导文档：<a href="https://www.dazhuanlan.com/coolspeed/topics/1376322" target="_blank">Hexo部署到Github后文件夹名大小写引起的问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>趣丸测试工程师社招面试</title>
      <link href="2021/07/20/%E8%B6%A3%E4%B8%B8%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%A4%BE%E6%8B%9B%E9%9D%A2%E8%AF%95/"/>
      <url>2021/07/20/%E8%B6%A3%E4%B8%B8%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%A4%BE%E6%8B%9B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="634e7ca842cafd290762074d3d96e0e62d5c425a89ad56e0a5a8a8e578fe429c">2be351b837f5cf7239c822b629f038f9c3095f87fdcdbb12c4fefeb90ff16b703d9458d82dfa27af419d80bc2e7c4cf68b15df16ed492cf8135d99bbbe9e0d36493e54622af32e075d8d9694811d9466307754cdcbb1d0d1b372859460a5e539b6dfd194eb1d69b06d078d7d776218e71ab8a2fe4b97dc466a2636a00adaba6b6627c9646807db8fc462ae38f2470249b711b19df7b6301bd631befdb97d43b69fc327780fbaea93fac8ee47402766bbbee81ab7f85a07e13273bcd1781d99a081d056255d6427604bea91047c05e446a13fa485078fcd68be7b2767a0140371be3ceda87114f452a84a792072e0d06d45c33fa877088fa37e600f068110328675c91d8f8980c8430f9aa356350ef2854fbb838a6c152c4719403ec01e6f52f5134ce488e66fa1b96c77349a8b488d0110c2467b5fca26c047ed6b74e101ff35ce2d7f038d6b7110da3666a87e49151eb2d7dbae2e090d093c07c6c7d78e0c90814b3ec7708ded4a9b2f94ecfc33b1dc25f899f984116fa8b64514ee87dd150c3992a9b3c2c624ae0430d27feac4440ccfe5c191935d2fb6a0b9b66c0a5add81ac14eceba0450c9448f1db26b452bbc6ed703abd7275a980d85c30a32ddb103201aed21b3da5c99672f6adf5313e20404925e94aa20ff27b307bffced2ca9fe16e7a181f4a75be747454a0fac1aaef098fc62179be72adc79df328cbd7d7b96c9fb3297a371af4605b0004585389174659c42c793297bfb1f7e81f7dc8af7c78ab956ad46edbb8aeee4ab6cec3535875e7e99c8b8a81d290e808b75ebe6ff900059f9c04a4b23564e3736c98d204217bb4f106901ec437a02c3321828bf94b855a962b9c4c391f405043a418e9d9d2f5aef7795c75a010513af41e3faa0f9a508960efa672a83b7ad21996b832f88e362b1024700017cfbd29bd9e7f4bf82c11a2362b3674e3b5a0b477e0c77cead07e5d808a5cf2a8d56d0fec74dd88806529e012497cf95fd1fd0ace3b6a38b079e29697bd05e8b1677913b9aadd55ce1f0938593373175e609e4e217a72c2e873089dd33ec819a211fac551be261ff40837f88732b5869dd2da8906b937c4d26c297cf54a10c26a87af7d6578a636ba144214bb329a826cf7fc5300b8b894e2a7aeadb52d1ffa7c0f17755118c68affe9c431cf014b6db2afd51105a525233031dcfcc3df0b0f14f11c0e5b074947cf938d36d115490e5e1cab744e7e6e538518e94dbdbfcb075fc17fd8b8f7f1dd87e691d58eb78f1e2da339196b5dc9e0bce61eaa301070ff73d1f009383ef6ab6b2cb7bed2573f8c8e99a7139c16a2871fe080d37f827261037427ce3f912461d540f0cdbc3ca99442048e15c0f9d8350edc5e58f62413ff80272df9a3060a89f325e31311e8d8f1db2808e3694c622b8c528540e001e1b3130617bbdefa713da21f72641c4dfd8f09eafc6a12be7a2b0cd53362e45d7cf58f7a239bdf7e8f2ceb7dc0aee3d31768b8346f65b4b4333eb26430a7f3d7a629bbcf72a3d44603a1a0459ac5460c3d5d0fdf5825a20c03ee137b97823d5c4528d85340039a377e2277203bab8f0ee73c19a479a3e47d65ed84cf8470385ed1c81370ccfd39c81c9c29f526eb067a33feb96cdbed332b338e1c51148b005ee8cba678c08d41ad280eb08d7219fa637dd14e8d6c0289a8f9dc723b12fc6e6f237718c6213cfa81e54a55dc516f2dac0f2c33f17b1cb9696a542e7e7800976718ddc14e15c34414f52876b70b0f686cc80fa6a551a88bda7a531e28c0e5614bfb86638d97423c5e74dda4739d2f2050a127133ac24ef1485e4f46c22c387239f699bfed69f5443c7c5d33ad4f113ff335b24e17bc48a9d8926eb3c3fbb03aa9a2c50f3ffbd81e65ec61d9d5beb729284242fffabbfde702bb2bed95503ccf38dd9ce1d29fda3280854192d1378b4743163b2a551339448e9ce4ed24500151d0ff99d3c6dbbdf9883cd6e1ed7df61856d2e7baa56277934a2a30f67162917e4e834e293ef837ba0eb217b2b54a9969b38cda0e90f605ba1ac220ec798a2e5edb227ad1351c1eaaf8d62599e4e7dd7f376a6e4f4fce6b8df844e00ab00243c477364b39b578d055fd102f3c698a9b252626127fac59c645a5204b334be55956f8ce342d672554ce2e91d4dc560ba6aa988476fe9b5f66c44d241574b71937d0f9153ccab317ac0dee8e3e3459d4544afcff41bbb25ba47752aa6268dfd143c28ce9b7b97f3d11c92a641f05ddc48b3b29592bb10862c861b1c1ab77b0dab43890f2f447f27c17afaed86f23989e5d65e9cdb88ce09fac6b85495998b938214e1ca684f1830a1aacd478cb459430b40ca5196704d1e7f2ecf73dd0feb9206b95d2d1537ab2ac5c4571e1deb7c126da10b05dcb869406428b1679b488fde8555145c1544a9f19e5e2482e989b0bb7ae215668b8aa7d86910eefd1492a6374c1428facb440eab22eec30968845486f4b463be00955d4ccd3dfdc61b127eb3dcc4e282e1bbc8104c5189af1c687a53cad81c8a329de0a5998d774ce692abf276e11a4ffc0594a86e408fb7987c744299f8e853b8daa81f1e5469a00f7b40319b8772bac6509c55b8d8828e3491b046085bb065169c003d049d61aad231b1c6a186f8073a919f555c3c76aa453b83e20e021fa9cc7bba92cd593ba2592a4d034af599f5c62752ee9b6b2216e80c45f759a5291c72c99a74a32a2b788fcda69cf361aee4a57e840a142bd7a896d777101b1b4d485f762ce69bf314aee3031ef3303b97177c7fc7b168f159d94162807ae9ca42427198faa696c81e803ea54c6b35878b0397485be0e40eb889a3bd6998c2f2bac052f3ad66a29e84ed97b80fcd645f8eac0490665bfa10763da752189666c0ce0da0c0a070d4f5591b8cf7623f5e170815784a37c28415f913f977fb98f214a4966cdab19e319a1c3921ee8b243a04ff2fafdac619f7ada4cffaefb93c326e83903f36f0a4d18e6e8fdc3d66f440b1f3bd92713bf35a27584340087bf786a2ed8b1eb0c141b5e3339e26af501034e5bacdfda3aace2272cc54b2c72c21a2634ae7a78d7370e4dadf7f4aca7e2a53760a8f370ab50795fc396a6a60023e14e2b628ff961faeb8587cde8ddb87a6880dfd34f6e1e16423f15d7e75ef9bb15dc20407536eaac30c9771e5abf809b60ee66815f75d5f7b70e2f056893e2c8b946aa571e6c65bd2061484401c3bfea68c428c88d2b63b86ce8d379a2e1da50da0efabd4a6fe96035ed0e79932fe360b560522342e3a9920c0e1d1b0574051314467ebfd5256751e8873a592e92a3e1acb737d91ab9f4172fd76a6b553fe95ad901ba40dcb87cdd32cf329915f9bafcc96e6323439e937b602a372044acb071f4e512e0f90be8f5fd0c0c7cfed3683e151e5ef8ff291cc7ef9c7fb4689fa9b084e3d96589f0ac574a7fa5b6292b7dc28e6e99198e98b4ceaba30db8d7e9320461cb893cb65e13cd41f0484ec5a39c99c35265fb155b558a51cebe88ad1f00364c453900d3caf8ac75768da050fab2c03e0b2dc088d2247503ab5fbdcc9ceb326e91d63377004019fb8ec247e9e8404109adeafe3688d0010d208f56ee4e0f6663117882b433ec1896f9144c49951a0145ea3b0c1e98fefaed953e90c8f88add690c9157721da823f8834257e29dffe1c81f7253457c41893c64d885033eca6340d0128bc21e285215469eb60c386ae8101c8f3cd29bb18e920a150c6f9e58cdbeb6108d33639750b937e73caa1b1277be28e13e56f79f064c1b4db72c43a51fc3707f4c054838f124dd09bf11a2803fad3be79ce0aab5b017670b56977734f46d5f9d3fe4d3c1ac22b4a02f1cc02b574baac8ad7866de2ee374edc5c4d8676761a0b5478560d4ad666f5a8f4aaa2a479bbc3c3703d764c3247a0f9326e9f42a01c8015540b7c22d265df51810fd8b5877753005b3bda493f1ab6e604d1edb4dc78204b59079675349207d7a5a0d59cb572d37abefe4b9236d152c51ed23af17d4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 面筋 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面筋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荔枝测试工程师笔试</title>
      <link href="2021/07/08/%E8%8D%94%E6%9E%9D%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AF%95/"/>
      <url>2021/07/08/%E8%8D%94%E6%9E%9D%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ecdc23897758d7228298e659fd60bc08a5a3ad33ca0a0307587c4544bfd2c23d">2be351b837f5cf7239c822b629f038f9c3095f87fdcdbb12c4fefeb90ff16b703d9458d82dfa27af419d80bc2e7c4cf63ec91e20a810adaaf47d0b8ffccabb21d65a75fb97dd2f209c546d9d1664207d0b5c0cf67920d495a03375cefbcb852ec2b63b53069b699e640d7b44930caedbc623760cf4d76ff1a02a839ea273d4b38d941aacc7c5f579cdee288818928df57b2d59366f4f6849abda312c2e95d6075a2b6a1984f3405cb473ce0d5b941478894af3ac3f32b9fde4f44b43c1a6779505bb6994a0ce37556d290dedfb153eb642f191ebc733b598ed5653eca2a695f973e879b52dcbcc78a2eb1fe784531a6bb64dc4a178a91d3f52d718d0e86b5be720eeaeffc2a82986e995515e6f06ddca2791c6eea8de9aedba08082657e2acb63a7b95e3f80b98abdbbbf7e8b1ae0be21c0577062082b742140b49046a908cefc517a677c707d33c1dd86a1755d4c642c8f11b6442e3f35851fdacacccb70a8d461825feb08842a39776bcb6479593ada6319871765575d62d9645d638e512f73638bd70f7da237777b7aab481c6ec1ddcad8c9835962f6b338b6cff5f7d4765452566bf7b2c1ce1c40f85b8a804171918a7650a87ab1f4f70d59e2869de4e35d07d8a333d2859d090af54a8d05db160384e08bb5b160d6e8aa4fbe34a05f0060bde9548f4fa8bf365bcbd6c06f58889ca5a8605cbfa3db93853057f603bd04c6feb09fdcf75c1688c0f25a699fa4a0bace4ae9815b7184b2e942ae416100819fa8db51835e036ed02f9876361069a9c62be070d9b1f1fd5031221ff15d4dc9fbe54900448f4bd0543be9730b9892a3527f8d6b8b5af2d08bded9d6a5274d1677cfeede87f4a26e1cad392f8b4a08fdd5271732f6415aa0b131ed2bd025e98c947717e9d07cf53434f5c3d589dac22c9ab55a65f470f5c8a9b3abe854aa1f65d0772e8276dd534f801d6a2c9a8bb36f50159bc4cb0857d11af7dccca0d71196da3f4d393036119fc797cebe96e8be34c670564141d3b6f1ae0cbd19346afe82d0a4b9f4af7b8ee2b2c56cd816d09d1025dbee6114eb17d7fbeecb7b4d980f9927eba69c74dd6c6238d39aebf5289706af865f295efeff560ce91f9442480e0e91fc96442b780de17211e5c016eae27d0a89d464c31015e1b54b0473ec0a1a8fd8d30f435a7674b4f3e47f7dc876eff0926a1f4e13bb246f3562dc98db7437160f6af4d515694694d8028ef8bdf1221e23cbca3160c2df35d72552e5222831a3ae155cdd9db4a3a0f83ee8de5c0fe4571e3be33115082743892678e7e482f7936b439aa46ed4d0916b805e350fe5c313821a6fc2cc4bf50c69078dfdcceef5ebc870e3377ffaa72345b302633bca373d0d3b682a426a127d349396e17fb1ad23cc3ef8a3a681fa723fdbe7607f91ff24fa4ed42c2b1f3e32ebcbccaa84bc8fccb691b4d03fe99126b4a660241b592d4a219397608d49e45a4c1029397ba317e7c774979ba58d1b1aecee8717564948c0d9c112148a47775fcd5e36be58ff4984315c110c5db47d5a3337754127dcef408680c3dc45fabc9962a275f08c8e51b682f85957886000c3cc5f438c912427738f5d96c801e605ba31a246745699140399dc0d86c58d8adf54b87978d095c5da23ff9ecc876dc5d280357d6b760cb342d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SheIn测试工程师社招面试</title>
      <link href="2021/07/06/SheIn%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%A4%BE%E6%8B%9B%E9%9D%A2%E8%AF%95/"/>
      <url>2021/07/06/SheIn%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%A4%BE%E6%8B%9B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="555c069907920a84151c70f6f817498d5efd0e316ace86e0f14363ee6a927e7c">2be351b837f5cf7239c822b629f038f9c3095f87fdcdbb12c4fefeb90ff16b703d9458d82dfa27af419d80bc2e7c4cf6f8cbedd72bed7f4a5758bcbff1d3c922f40981aa9996b73ec39f564c6ccd7b275e151f767cdaab99c1a948e3bbbec2858a28ba69805cc37d25e4f3d6c3f3ea9ccbc3526e81ca573042483734f896f8dd0489b7439136044376930341af1c3fe4c52aa704716cc5fc2dc8e9526bd0c9e15acbe012051707873324600737b0354f5b24901d730a3ca545e383ae924ad0e936edfe559dfe7b0be631cd69879b0c167d4a4b2821f8543503aec794e4d1356a030d24a19d475013e1747d9a3a393ec0d7d5dc5f228518301135b570865c9784fc0d0b939b2f41e1b15c55a303afe2c322c6d8c2be3f93b640c4d7506388e3a66dc764ad9cad8d265cdda1ea05438fd7532e5cb3824c1912cf888bb0e8921c32a13f36b2014c2bc47b89eb004a78ca1734f4393bc286fada778f0361667e0bfd00de9ca4bd7701957e93b0e5262088fa9c403cd85d02d50fb988b2defd4ab7c8f3702314bcd27af205aeeb301f2468ac6fad7010c67b1ce07993d9ac6df9cbaa24b0a8dba8061bcf3bec3ca08e9ccda09696a2f0abf6ac130623bc896d7e829dcc4f962f3f339143a79df8017d462d60388893c517145721bef269b1b92558db61b77a8a307f25f60afe499193b171c0d80a5950d32f18ba8047de853cb246708ac0d9342b253350fa82b7e4fa52a2ba0d50aadf52a0981a4ad7c3921849bec5a004de64e7dea451e1317fe9e3b6da53ae91f4cdc7de0a35665f51e865c8973c8481dc051ad69a1a1e9ad80993ace5e86939060ff3a365971ef4f8414a809c8a4a943d054971e0b8960c5dfe680b545704b88754b3acaaaaf7e7e1315498a3d2a4424de446c89da0643aff23ce4795052216321ca2fa4c815e84096348ffd83aed675b70f6c2217d2c33462eb753cc3429a8fd3878cfbf5ab4e69df37892351b2c64b9ea954570e209b07c611840c1f706629e635bc5420f383ff2efebf6c7bf8c4648b107fd9f815c635934203dd1b2b8e5c003d818adf2ba813aac30e8b0d905bbb6a9e0a496db7588ce14ac3cfab4534c4127b20785cee07b9b0155a2bacc6f71c050449ef214b07fe0ccd1d685fb0e32d3ac66d18ec8e912e99c628c803dcc251f2b00569808791ab1ba3ddf1d49b2acf021911d956b649e1a983f56aec50135e873683c337db0b62d3324c15ab03da3573c294fc1499d687c1adee51cac2166df97e921736e4e594bca153c480d3bac871628aa8c9fe340d7ae3896bcab3a5a62f0f0ec5ad2f11c754aed15d0562bef8c15c1c612d9afd51ca657cf2fe4b92eac76a0e5dbbbea671ea47ec2bd7e871c83ce06df7acc4190c586141dd7e88f8e5390e70988f7e0e53cf6ee856accfcfda081a1e448a297baa7b32a380b746feb91f4b24a87a55f9f8b51b9e9bd545d7b10eba27bccc54b4eb59627865974835074a15fd4d8fe22bd6158bb1c630c211fc76d4269929f46d7fe0b9fcac7a7e044ca6150f7dec693b5dca061755cd83462ce57ca5e40c21d55d9bb2952be547985f1678034de001ad2b8548ef2c8e04f9045b2d82890d46969c9aff46c5b55dc4325963c0e512c5ead7e905e8092659ce5882b5d5a6b6093b1a9e904c6243e519f035c701fea29fd251f4627192b6d133b686cfd03fa46d49c4c85fcfc9183e690b066c98e69a77468164fc905b6e49b48ec46110b12db3fe9f4ed9bf022633c7e32f6f4cc602c4d8221d1b2b5c88761d90f19fa3479af16a7a317ea2594a3db85ea8164ff2159e3be4e76d91c4227c100bc441c265be15df5b469c131301e40c4c18c85101ff6f5ee8df3ac947f68d73e38ac3206113dd882f273e14db0139796be6e95193c9504247ab570dfb14d358d3d58069071cdcfb3bcab33fe181ce1dae753c20310ccf5901a37cd6d00f315af49ecb6f5a320a267de2d251a54e3f4754f55612fe3ff532df047a14a51a88758cbe8be49304ab700adb4643bbaa59ae6ca26ae6dd18ca4581bb88023559c6c282e31112b33d045d6e4634110a81f91ddb9d7273da1312c36657bea46986e0667db22c24a4a295640618ccff79dd1c05d70962ef9d6bc8373abb7532c4c238b3209320e8533267ed0817382e455476fcf304000bebf2be07ce88d66eaef2f7213da43b36cc91e3442afacaab26e4f9bdd1c71c7c82cadf077109255eb022aafb8d2377e27244af718bdcb948bd1376c3f0979fa60eb3a840e842c69d92b1f09cec7a1dcfe5d83ef37e4939c1943291096e7273be78477c8e5ebb56d71bfccf60b58ef26d1aaa461ce418f5a70f426734af1504921d56303e1221af077f0806b36522d16d81e4604c0d1ea1aae5e60046e8a847b4a039c0147398ea85b92ae62d494fc6dc49762ec7c73482a530bf2f4958ecfef6e5ee5176d43db7ebb52279e51a699ebfd8143a73559ee4e309eca9268dfe9ad74530e6836635dd5deb12344c1e82342f2096f3ad38c0d8224b396d5b90413dd05d08b691055c1a19f9cc10a6a754d280636632d9b1b18eef1f257dadfd028ca457f6651a611baf6bc6b3d2342769477ccb9074981b580e13d1c1a2fc47a3b5a3db577de0d1d92432d90770001b41a662c01897cedb779236f81c6ac6368c31ad6228c248d252ca22e15eb201b69865db048e8d9e20d7ed7f52ad3e55ab995346fafa8616e4925d3143cf43e69d4471c93f933bb7a47c531ca48fc6f06050c95e940e0b11c1a012e413e251d65546ca05c8bc8cba40c7304d9c35d7ed6302c684a84197ea209f566cd1542192c81d4fc041426fa993ca0996bde6014e5d68e691daad5aff246eddfb69f958af53cef9b335b1cfc6ff1bcbc7d90d5e545b4650abff2278980c9a2494edaa55d473a1075621a1d0b846652d52de833d5b863a270c26ecefa2ba8ffb1ae91884e2f4dd849c1e857650a1b53e7953044092eb4d19f97c477e9768e13473ebf0c9031dfdd4a981a97ebeb03a7f14a62b7f0a6c57616d189cec9297b13b33d9ef4ae0e8f980a750f3c0c07254ce73c2cf79ce81ddbc676097e2e4cbc0546121f922ebe473e0c869d160144a17659b259ca586d7178c99fac81d173310d393e2978199a87626ce199a712e55fea18bc9548e8024a1423bd95f539b5faf1a165751f61f7248048c6b44d514e016d36d0628f7707e1b21bbd69a94c6327cd85e70cd5b92585bf8f69d4b250d9ca40223f5ab28e7d2bb65f4b6205e768e8c8b866d75a5ab9847b8a7c00d92fb80de1ecb4322e0480d96769362e7cee15c9ec16aa20fc4621cbd87f58703fd75a1c372f39d7b7162df010cf742c5323a9f9b6bf7d2562335197b9fa5b34afd4fcd83856db696d00c994a3725bb67231d05f6fcbb19df5ab297506d705540c9eaed431da7c93711f2730929919e4b1bba61dc72d821dedb51f8f045516eed180c8629d995f1535eec7221a9b4cc03e3c772b5e2507a22d1233e5f2005944227ab0135b1e51c1a1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 面筋 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面筋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite应用 - 抓包改包</title>
      <link href="2021/07/06/BurpSuite%E5%BA%94%E7%94%A8%20-%20%E6%8A%93%E5%8C%85%E6%94%B9%E5%8C%85/"/>
      <url>2021/07/06/BurpSuite%E5%BA%94%E7%94%A8%20-%20%E6%8A%93%E5%8C%85%E6%94%B9%E5%8C%85/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BurpSuite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础知识（3）- 数据链路层</title>
      <link href="2021/06/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%883%EF%BC%89-%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>2021/06/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%883%EF%BC%89-%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Django框架 - jQuery应用 - 获取后台返回给到前端select</title>
      <link href="2021/06/28/Python%20Django%E6%A1%86%E6%9E%B6%20-%20%E8%8E%B7%E5%8F%96%E5%90%8E%E5%8F%B0%E8%BF%94%E5%9B%9E%E7%BB%99%E5%88%B0%E5%89%8D%E7%AB%AFselect/"/>
      <url>2021/06/28/Python%20Django%E6%A1%86%E6%9E%B6%20-%20%E8%8E%B7%E5%8F%96%E5%90%8E%E5%8F%B0%E8%BF%94%E5%9B%9E%E7%BB%99%E5%88%B0%E5%89%8D%E7%AB%AFselect/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：搭好环境后，开始准备将原exe上“连接设备”和“获取设备”这两功能先转移到web上。此案例讲的就是“获取设备”这一步，从构思-实现-踩坑-解决来讲述。</p></blockquote><a id="more"></a><h4 id="目的"><a class="markdownIt-Anchor" href="#目的"></a> 目的</h4><p>exe上的功能如下图：</p><p><img src="/2021/06/28/Python Django框架 - 获取后台返回给到前端select/exe%E4%B8%8A%E7%9A%84%E5%8A%9F%E8%83%BD.png" alt=""></p><p>功能1 连接设备（非本文重点）</p><p>功能2 获取设备，通过打开exe或点击刷新触发被控设备列表的刷新——该功能需转化到web上</p><h4 id="构思"><a class="markdownIt-Anchor" href="#构思"></a> 构思</h4><p>设备列表从哪来就从哪获取。是从数据库？还是后台查询服务返回？——后台返回</p><p>设备怎么展示？——下拉框元素展示</p><h4 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h4><p>1、目标页面刷新时，触发jQuery的get请求</p><p>2、通过get请求的url找到view层</p><p>2、view层实现获取设备的功能</p>]]></content>
      
      
      <categories>
          
          <category> Web项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Django框架 - jQuery基础</title>
      <link href="2021/06/22/Python%20Django%E6%A1%86%E6%9E%B6%20-%20jQuery%E5%BA%94%E7%94%A8/"/>
      <url>2021/06/22/Python%20Django%E6%A1%86%E6%9E%B6%20-%20jQuery%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：继上篇的Ajax学习，还记得里面提到的$.ajax嘛。发现是自己草率了，只搜索了后面几个英文，谁知它竟是 jQuery ajax() 方法。anyway，就当边学边用啦~</p></blockquote><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Web项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Django框架 - Ajax应用</title>
      <link href="2021/06/19/Python%20Django%E6%A1%86%E6%9E%B6%20-%20Ajax%E5%BA%94%E7%94%A8/"/>
      <url>2021/06/19/Python%20Django%E6%A1%86%E6%9E%B6%20-%20Ajax%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：当学到JavaScript时，老是有Ajax的名词跳出来，并且参考的案例代码也有$.ajax的词汇频现，这不是逼死个强迫症嘛，在JavaScript基础大致了解后，又看了下Ajax。</p></blockquote><a id="more"></a><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4><ul><li>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</li><li>AJAX 不是新的编程语言，而是一种使用现有标准的新方法</li><li>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容</li><li>AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行</li></ul><h4 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 工作原理</h4><p><img src="/2021/06/19/Python Django框架 - Ajax应用/AJAX%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="AJAX工作原理"></p><h4 id="使用方式"><a class="markdownIt-Anchor" href="#使用方式"></a> 使用方式</h4><h5 id="1-创建-xmlhttprequest-对象"><a class="markdownIt-Anchor" href="#1-创建-xmlhttprequest-对象"></a> 1. 创建 XMLHttpRequest 对象</h5><ul><li>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象<br><code>variable=new XMLHttpRequest();</code></li><li>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象<br><code>variable=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</code></li></ul><h5 id="2-向服务器发送请求"><a class="markdownIt-Anchor" href="#2-向服务器发送请求"></a> 2. 向服务器发送请求</h5><ul><li>栗子：get请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/demo_get2.php?fname=Henry&amp;lname=Ford"</span>,<span class="literal">true</span>);  </div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure><ul><li>栗子：post请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/try/ajax/demo_post2.php"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">xmlhttp.send(<span class="string">"fname=Henry&amp;lname=Ford"</span>);</div></pre></td></tr></table></figure><p><img src="/2021/06/19/Python Django框架 - Ajax应用/%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82.png" alt="向服务器发送请求"></p><h5 id="3-服务器响应"><a class="markdownIt-Anchor" href="#3-服务器响应"></a> 3. 服务器响应</h5><ul><li>来自服务器的响应并非 XML,使用 responseText 属性<br><code>document.getElementById(&quot;myDiv&quot;).innerHTML=xmlhttp.responseText;</code></li><li>来自服务器的响应是 XML,且需要作为 XML 对象进行解析，使用 responseXML 属性<br><code>document.getElementById(&quot;myDiv&quot;).innerHTML=txt;</code></li></ul><h5 id="4-onreadystatechange-事件"><a class="markdownIt-Anchor" href="#4-onreadystatechange-事件"></a> 4. onreadystatechange 事件</h5><p><i>使用场景：当需要执行一些基于响应的任务时，例如判断响应状态status为200</i></p><p><img src="/2021/06/19/Python Django框架 - Ajax应用/onreadystatechange%E4%BA%8B%E4%BB%B6.png" alt="onreadystatechange事件"></p><ul><li>普通：直接使用onreadystatechange 事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">&#123;</div><div class="line"><span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></div><div class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="comment">// IE6, IE5 浏览器执行代码</span></div><div class="line">xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">&#125;</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>进阶：使用回调函数<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params">url,cfunc</span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 代码</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// IE6, IE5 代码</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.onreadystatechange=cfunc;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,url,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">loadXMLDoc(<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="5-高级用法"><a class="markdownIt-Anchor" href="#5-高级用法"></a> 5. 高级用法</h5><ul><li>AJAX ASP/PHP 实例 —— 创造动态性更强的应用程序</li><li>AJAX Database 实例 —— 用来与数据库进行动态通信</li><li>AJAX XML 实例 —— 用来与 XML 文件进行交互式通信</li></ul><p><i>JavaScript调用的服务器页面ASP和PHP可实现以上用法</i></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>回调函数是一种以参数形式传递给另一个函数的函数；如果网站上存在多个AJAX任务，则应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Web项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Django框架 - JavaScript Ajax jQuery关系梳理</title>
      <link href="2021/06/19/Python%20Django%E6%A1%86%E6%9E%B6%20-%20JavaScript%20Ajax%20jQuery%E5%85%B3%E7%B3%BB%E6%A2%B3%E7%90%86/"/>
      <url>2021/06/19/Python%20Django%E6%A1%86%E6%9E%B6%20-%20JavaScript%20Ajax%20jQuery%E5%85%B3%E7%B3%BB%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：学啊学，忽遇难题。到底JavaScript Ajax jQuery这三者啥关系啥区别呢。那我搭项目时用谁好呢（此处颇有君王选妃之难，hhh)。稍稍梳理好后，发现是自己多想了￣▽￣。</p></blockquote><a id="more"></a><p>Django</p><p>Python</p><p>Bootstrap</p><p>HTML</p><p>CSS</p><hr><p>jQuery与JavaScript与ajax三者的区别与联系<br>简单总结：<br>1、JS是一门前端语言。<br>2、Ajax是一门技术，它提供了异步更新的机制，使用客户端与服务器间交换数据而非整个页面文档，实现页面的局部更新。<br>3、jQuery是一个框架，它对JS进行了封装，使其更方便使用。jQuery使得JS与Ajax的使用更方便</p><p>关系比喻：<br>若把js比作木头，那么jquery就是木板（半成品）<br>jQuery与ajax都是js的一个框架，各有各的功能，若js是父亲的话，jquery与ajax就是两个儿子</p><p>详细情况：<br>1.javascript是一种在客户端执行的脚本语言。ajax是基于javascript的一种技术，它主要用途是提供异步刷新（只刷新页面的一部分，而不是整个页面都刷新）。一个是语言,一个是技术,两者有本质区别.</p><p>2.javascript是一种在浏览器端执行的脚本语言，Ajax是一种创建交互式网页应用的开发技术 ，它是利用了一系列相关的技术其中就包括javascript。</p><p>解释：<br>javaScript是用于Web客户端开发的脚本语言，Ajax是基于JS语言，主要组合JS、CSS、XML三种技术的新技术，是用于创建交互式网页应用的网页开发技术。jQuery是JS的框架，基于JS语言，集合Ajax技术开发出来的JS库，封装JS和Ajax的功能，提供函数接口，大大简化了Ajax，JS的操作。</p><hr><p>JavaScript<br>简介：<br>简写形式就是JS，一种广泛用于客户端Web开发的脚本语言，常用来给HTML网页添加动态功能（其编写的程序可以被嵌入到HTML或XML页面中，并直接在浏览器中解释执行）</p><p>组成：<br>核心（ECMAScript）、文档对象模型（Document Object Model，简称DOM）、浏览器对象模型（Browser Object Model，简称BOM）</p><p>描述：<br>Javascript就是适应动态网页制作的需要而诞生的一种新的编程语言，如今越来越广泛地使用于Internet网页制作上。<br>Javascript的出现使得网页和用户之间实现了一种实时性的、动态的、交互性的关系，使网页包含更多活跃的元素和更加精彩的内容。<br>Javascript短小精悍，又是在客户机上执行的，大大提高了网页的浏览速度和交互能力。同时它又是专门为制作Web网页而量身定做的一种简单的编程语言。</p><p>Ajax<br>简介：<br>即“Asynchronous JavaScript and XML”（异步JavaScript和XML)，AJAX并非缩写词，而是由Jesse James Gaiiett创造的名词，是指一种创建交互式网页应用的网页开发技术</p><p>组成：<br>基于XHTML和CSS标准的表示；<br>使用Document Object Model进行动态显示和交互；<br>使用XML和XSLT做数据交互和操作；<br>使用XML HttpRequest与服务器进行异步通信；<br>使用JavaScript绑定一切</p><p>描述：<br>Ajax是结合了Java技术、XML以及JavaScript等编程技术，可以让开发人员构建基于Java技术的Web应用，并打破了使用页面重载的管理。<br>Ajax技术使用非同步的HTTP请求，在Browser和Web Server之间传递数据，使Browser只更新部分网页内容而不重新载入整个网页。<br>Ajax是使用客户端脚本与Web服务器交换数据的Web应用开发方法。这样，Web页面不用打断交互流程进行重新加裁，就可以动态地更新。使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面</p><p>Ajax应用程序与浏览器和平台无关的！</p><p>jQuery<br>简介<br>是一个快速的，简洁的javaScript库，使用户能更方便地处理HTML documents、events、实现动画效果，并且方便地为网站提供AJAX交互</p><p>特点<br>jQuery是当前很流行的一个JavaScript框架，使用类似于CSS的选择器，可以方便的操作HTML元素，拥有很好的可扩展性，拥有不少插件</p><p>描述<br>对于程序员来说，简化javascript和ajax编程，能够使程序员从设计和书写繁杂的JS应用中解脱出来，将关注点转向功能需求而非实现细节上，从而提高项目的开发速度。<br>对于用户来说，改善了页面的视觉效果，增强了与页面的交互性，体验更绚丽的网页物资。<br>javaScript框架实际上是一系列工具和函数。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>JavaScript</td><td>前端语言</td><td></td></tr><tr><td>Ajax</td><td>技术</td><td>Asynchronous JavaScript and XML，一种创建交互式网页应用的网页开发技术</td></tr><tr><td>jQuery</td><td>框架</td><td>快速、简洁的JavaScript库，JavaScript框架</td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Web项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> Ajax </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FiddlerScript应用 - OnBeforeRequest与OnBeforeResponse</title>
      <link href="2021/06/03/FiddlerScript%E5%BA%94%E7%94%A8%20-%20OnBeforeRequest%E4%B8%8EOnBeforeResponse/"/>
      <url>2021/06/03/FiddlerScript%E5%BA%94%E7%94%A8%20-%20OnBeforeRequest%E4%B8%8EOnBeforeResponse/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：使用FiddlerScript是Fiddler的改包方法之一，在业务中，如果不是修改statusCode这种简单的改包，我会更喜欢用FiddlerScript！</p></blockquote><a id="more"></a><h4 id="一-入口"><a class="markdownIt-Anchor" href="#一-入口"></a> 一、入口</h4><ol><li><p>右侧顶部工具栏的FiddlerScript<br><img src="/2021/06/03/FiddlerScript应用 - OnBeforeRequest与OnBeforeResponse/%E5%85%A5%E5%8F%A3%E4%B8%80.png" alt="右侧顶部工具栏的FiddlerScript"></p></li><li><p>左侧顶部操作栏的Rules→Customize Rules…<br><img src="/2021/06/03/FiddlerScript应用 - OnBeforeRequest与OnBeforeResponse/%E5%85%A5%E5%8F%A3%E4%BA%8C.png" alt="左侧顶部操作栏的Rules→Customize Rules..."><br><i>当然，如上图，快捷键 Ctrl+R 也能够进入</i></p></li></ol><h4 id="二-使用举例"><a class="markdownIt-Anchor" href="#二-使用举例"></a> 二、使用举例</h4><h5 id="onbeforerequest"><a class="markdownIt-Anchor" href="#onbeforerequest"></a> OnBeforeRequest</h5><p><i>          在每次请求之前调用</i></p><pre class="highlight"><code class="">if(oSession.fullUrl.Contains(&quot;目标URL&quot;)){var mylogin='{更改后的请求body}';var requestJson=Fiddler.WebFormats.JSON.JsonDecode(mylogin);var reJsonDes=Fiddler.WebFormats.JSON.JsonEncode(requestJson.JSONObject);oSession.utilSetRequestBody(reJsonDes);}</code></pre><h5 id="onbeforeresponse"><a class="markdownIt-Anchor" href="#onbeforeresponse"></a> OnBeforeResponse</h5><p><i>          在每次请求之后调用</i></p><pre><code>if(oSession.fullUrl.Contains(&quot;目标URL&quot;)){var strBody=oSession.GetResponseBodyAsString();strBody=strBody.replace(&quot;期望数据&quot;);oSession.utilSetResponseBody(strBody);}  </code></pre><h4 id="三-使用框架如下"><a class="markdownIt-Anchor" href="#三-使用框架如下"></a> 三、使用框架如下：</h4><pre><code>if（满足某条件）{    获取待修改数据  替换该数据 重新写回请求  --如有必要，可以加些确认修改成功的方法：日志或窗口  }</code></pre><h5 id="1-满足某条件"><a class="markdownIt-Anchor" href="#1-满足某条件"></a> 1. 满足某条件</h5><p>oSession.uriContains（‘URL’）　　uri包含目标（模糊）<br>oSession.fullUrl.Contains(‘URL’)　　uri包含目标（模糊）<br>oSession.PathAndQuery == ‘URL’　　uri包含目标<br>oSession.HostnameIs(‘域名’) 　　homename为某域名<br>oSession.hostname == ‘域名’　　homename为某域名<br>oSession.host == ‘域名:端口’　　host为某域名与端口<br>oSession.responseCode == 304　　返回状态码为304</p><h5 id="2-获取待修改数据"><a class="markdownIt-Anchor" href="#2-获取待修改数据"></a> 2. 获取待修改数据</h5><p>var Request=oSession.GetRequestBodyAsString()　　获取Request 中的body字符串<br>var Response=oSession.GetResponseBodyAsString()　　获取Response 中的body字符串<br><font color="grey" size="0.875em">如果想要替换body里的某个变量，则可以如下：</font><br>var requestJson=Fiddler.WebFormats.JSON.JsonDecode(Request)　　  转换为可编辑的JSONObject变量<br>var Request=Fiddler.WebFormats.JSON.JsonDecode(requestJson)　　  重新设置Request Body</p><h5 id="3-替换该数据"><a class="markdownIt-Anchor" href="#3-替换该数据"></a> 3. 替换该数据</h5><p>Request=Request.replace(“1111”,“2222”)　　用正则表达式或者replace方法去修改string，将1111改为2222<br>Response=Response.replace(“2222”)　　用正则表达式或者replace方法去修改string，将body改为2222<br><font color="grey" size="0.875em">承接第2步：</font><br>requestJson.JSONObject[‘key’] = “true”　　将key对应的value改为true</p><h5 id="4-重新写回请求"><a class="markdownIt-Anchor" href="#4-重新写回请求"></a> 4. 重新写回请求</h5><p>oSession.utilSetRequestBody(Request)　　将修改后的body，重新写回Request中<br>oSession.utilSetResponseBody(Response)　　将修改后的body，重新写回Response中</p><h5 id="5-检查"><a class="markdownIt-Anchor" href="#5-检查"></a> 5. 检查</h5><p>可分别放置在第2步后和第三步后，对比修改效果<br>FiddlerObject.alert(Request)　　弹个对话框检查下修改后的body</p><p><i>也可以省略第2/3/4步，直接替换并写入 <code>oSession.utilReplaceInRequest(&quot;1111&quot;, &quot;2222&quot;)</code></i></p><h4 id="四-帮助文档"><a class="markdownIt-Anchor" href="#四-帮助文档"></a> 四、帮助文档</h4><p><a href="https://blog.csdn.net/qq_26877377/article/details/86715192" target="_blank">参考文档</a><br><a href="http://www.fiddlerbook.com/Fiddler/dev/ScriptSamples.asp" target="_blank">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fiddler </tag>
            
            <tag> HTTP/HTTPS </tag>
            
            <tag> 抓包工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础知识（2）- 物理层</title>
      <link href="2021/05/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%882%EF%BC%89-%20%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>2021/05/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%882%EF%BC%89-%20%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：物理层，它是计算机网络的第一层，它虽然处于最底层，却是整个开放系统的基础。关键词记忆——“信号和介质”。</p></blockquote><a id="more"></a><h4 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h4><p>解决<strong>如何</strong>在连接各种计算机的传输媒体上传输<strong>数据比特流</strong>，而不是指具体的传输媒体（通俗的讲就是传输的数据是通过何种方式，以什么形态传输的，类似于我们说话，别人是如何听到的，通过的就是声波，计算机传数据，又是怎么样把数据带过去的呢）。</p><p>物理层的主要任务：确定传输媒体的接口的一些特性，包括，</p><ul><li>机械特性：接口形状，大小，引线数目</li><li>电气特性：例如规定电压范围(-5V-5V)</li><li>功能特性：例如规定-5V上0，+5V是1</li><li>过程特性：也称规程特性，规定建立连接时各个相关部件的工作步骤</li></ul><h4 id="数据通信基础知识"><a class="markdownIt-Anchor" href="#数据通信基础知识"></a> 数据通信基础知识</h4><p><i>在这一层，则会运用到大学里说的模电数电，结合实际来理解，尝试吸收。</i></p><h5 id="数据通信模型"><a class="markdownIt-Anchor" href="#数据通信模型"></a> 数据通信模型</h5><ol><li><p>PC机将目标数据转换为010101的数据比特流，传给调制解调器。</p></li><li><p>调制解调器将数字比特流转换为模拟信号，传给目的系统。</p></li><li><p>目的系统逆过来解析成原数据就行。</p></li></ol><p><img src="/2021/05/25/计算机网络基础知识（2）- 物理层/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F.png" alt=""></p><h5 id="常用术语"><a class="markdownIt-Anchor" href="#常用术语"></a> 常用术语</h5><p>数据（data）——运送消息的实体；<br>信号（signal）——数据的电气或电磁的表现；<br>模拟信号（analogous signal）——代表消息的参数的取值是相连的；</p><p><img src="/2021/05/25/计算机网络基础知识（2）- 物理层/%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7.png" alt=""></p><p>数字信号（digital signal）——代表消息的参数的取值是离散的；</p><p><img src="/2021/05/25/计算机网络基础知识（2）- 物理层/%E6%95%B0%E6%8D%AE%E4%BF%A1%E5%8F%B7.png" alt=""></p><p>码元（code）——在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p><p><img src="/2021/05/25/计算机网络基础知识（2）- 物理层/%E7%A0%81%E5%85%83.png" alt=""></p><h5 id="信道概念"><a class="markdownIt-Anchor" href="#信道概念"></a> 信道概念</h5><p>信道——信号传输的通路，信道中自然会叠加上噪声。<br>单项通信（单工通信）——只能有一个方向的通信而没有反方向的交互；<br>双向交替通信（半双工通信）——通信的双方都可以发送信息，但不能双方同时发送（当然也就不能同时接收）；<br>双向同时通信（全双工通信）——通信的双方可以同时发送和接收信息；<br>基带信号（即基本频带信号）——来自信源的信号。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础知识（1）- 大纲与概述</title>
      <link href="2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%881%EF%BC%89-%20%E5%A4%A7%E7%BA%B2%E4%B8%8E%E6%A6%82%E8%BF%B0/"/>
      <url>2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%881%EF%BC%89-%20%E5%A4%A7%E7%BA%B2%E4%B8%8E%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：书到用时方恨少，故重拾大学的计算机网络基础知识。<br>（说实话，作为自动化专业的我，都不记得自己有没有学过计算机网络基础知识(｡ì _ í｡)）</p></blockquote><a id="more"></a><p>计算机网络基础知识主要分为以下几个模块进行巩固：</p><ul><li>概述（本篇）</li><li>物理应用层</li><li>数据链路层</li><li>网络层</li><li>传输层</li><li>应用层</li><li>网络安全</li></ul><hr><h4 id="一-互联网发展的三个阶段"><a class="markdownIt-Anchor" href="#一-互联网发展的三个阶段"></a> 一、互联网发展的三个阶段</h4><ol><li>第一阶段：从<strong>单个网络ARPANET</strong>向互联网发展的过程，采用TCP/IP协议</li><li>第二阶段：建成了<strong>三级结构的互联网</strong>，分为主干网、地区网和校园网（或企业网）。逐层向下的结构</li><li>第三阶段：逐渐形成了<strong>多层次ISP<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>结构的互联网</strong></li></ol><p><img src="/2021/05/24/计算机网络基础知识（1）- 大纲与概述/%E4%B8%89%E5%B1%82ISP%E7%BB%93%E6%9E%84%E4%BA%92%E8%81%94%E7%BD%91.png" alt="三层ISP结构互联网"></p><h4 id="二-计算机网络概述"><a class="markdownIt-Anchor" href="#二-计算机网络概述"></a> 二、计算机网络概述</h4><ol><li>计算机网络定义与分类<br>定义：由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某–特定目的(例如，传送数据或视频信号)。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</li></ol><p><img src="/2021/05/24/计算机网络基础知识（1）- 大纲与概述/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB.png" alt="计算机网络分类"></p><ol start="2"><li>计算机网络的组成<br>2.1 组成部分：一个完整的计算机网络主要由硬件、软件、协议三大部分组成，缺一不可。<br>2.2 工作方式：计算机网络（这里主要指Internet）可分为边缘部分和核心部分。<br>2.3 功能组成：计算机网络由通信子网和资源子网组成。</li></ol><p><img src="/2021/05/24/计算机网络基础知识（1）- 大纲与概述/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BB%84%E6%88%90.png" alt="计算机网络组成"></p><ol start="3"><li>网络标准化工作及相关组织</li></ol><ul><li>工作<br>– 法定标准：由权威机构制定的正式的、合法的标准（OSI）<br>– 事实标准：某些公司的产品在竞争中占据了主流，时间长了，这些产品中的协议和技术就成了标准（TCP/IP）</li><li>组织<br>– 国际标准化组织ISO（OSI参考模型、HDLC协议）<br>– 国际电信联盟ITU（制定通信规则）<br>– 国际电气电子工程师协会IEEE（学术机构、IEEE802系列标准、5G）<br>– Internet工程任务组IETF（负责因特网相关标准的制定RFC XXXX）</li></ul><h4 id="三-计算机网络体系结构"><a class="markdownIt-Anchor" href="#三-计算机网络体系结构"></a> 三、计算机网络体系结构</h4><p><u>分层结构，计算机网络的<strong>各层及其协议</strong>的集合称为网络的体系结构</u></p><p>Q1：为什么使用分层？<br>A：为了降低协议涉及和调试过程的复杂性，也为了便于对网络进行研究、实现和维护，促进标准化工作，通常对计算机网络的体系结构以分层的方式进行建模。</p><p>Q2：分层的优点是什么？<br>1 各层之间是独立的<br>2 灵活性好<br>3 当某层提供的服务不再需要时，甚至可以将这层取消<br>4 结构上可分割开。各层都可以采用最合适的技术来实现<br>5 易于实现和维护<br>6 能促进标准化工作</p><p>Q3：分层的缺点是什么？<br>A：部分功能在不同层次中重复出现，因而产生额外的开销</p><p>Q4：分层结构是怎样的？<br><img src="/2021/05/24/计算机网络基础知识（1）- 大纲与概述/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="计算机体系结构"></p><p>Q5：各层的主要协议是什么？<br><img src="/2021/05/24/计算机网络基础知识（1）- 大纲与概述/%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E4%B8%8E%E5%90%84%E5%B1%82%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8D%8F%E8%AE%AE.png" alt="层次结构与各层的主要协议"></p><h4 id="四-常用的网络设备"><a class="markdownIt-Anchor" href="#四-常用的网络设备"></a> 四、常用的网络设备</h4><ol><li>传输媒体</li><li>中继器</li><li>集线器</li><li>交换机</li><li>路由器</li><li>防火墙</li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>ISP可以从 互联网管理机构 申请到很多 IP地址（主机必须有IP地址才能上网），同时拥有通信线路（大ISP自己建造通信线路，小ISP则向电信公司租用通信线路）以及路由器等 联网设备 。<br>任何机构或个人只要向 某个ISP 缴纳规定的费用，就能从该ISP获得所需 IP地址的使用权，并通过该ISP接入互联网。<br>IP地址管理机构不会把一个单个IP地址分配给单个用户，而是把一批IP地址有偿租赁给经审查合格的ISP。互联网其实是全世界无数大大小小的ISP所共同拥有的 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIGO测试工程师社招面试</title>
      <link href="2021/05/17/BIGO%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%A4%BE%E6%8B%9B%E9%9D%A2%E8%AF%95/"/>
      <url>2021/05/17/BIGO%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%A4%BE%E6%8B%9B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="919ac6203f3dda7a494b5f63f04f236eaafd83cee3469f4a74dd2db9a42df629">2be351b837f5cf7239c822b629f038f9c3095f87fdcdbb12c4fefeb90ff16b703d9458d82dfa27af419d80bc2e7c4cf6bbb09a945de6881b668c9ac0fdee88d31de763527eeb91d318e0bf23bcf879de203c28fdc6f5ef8d92efa49a80219617f816b472c7217f92ece6fec70f765a7efb32fdbb44c0740c818224e32c60986296cb3af243fa7a5d8c279397f76455157ab0047a344a868dc38fc0514dc271a31c78a434f6fbaf98a07ddb635702cab8d2b6c42aac1ea402125ac15df6586cf2f015e32634e0386e7a0fbfaab0b1200f1f4ebc6af34b9409c6bd62badc83e0079dec5b750148a8dbcbc16cafc3e26218d3d2fcb2a72e1af62e98cb5c1d8ebd3d34ec8c1620f49c64f0c14a56a7be4aae0637352677839d37ca018d183b2f794ef4ef74af1b4a37ed114bd237df395c046fc383410eb1e8121171341142cd3d5df64a887bda70776237e9a2b745a4fcac884427160e6c2038f7856d0ff16db1a04a1ff5998bfe778c7ed7bc6d6dd6306003658761645b26c056aca706a886ee1abc77d66b14bfcbfb5c9dd1f313bb5aca9d368e50b7a69c616dc242f4dda4b66b7b36143a9e92a1ce732610b258bb32c5229996ddc12b6f90db276697bad006dab7f54875cd571462c696cf77c655e5d5e71f0e10de61bc84128f20017701d40afbbc200c047b27b49484174d56c9064aa9a99b66db3b360a9a4ef4651913526f2746272fc8c2b491251408a475f42c8eab4e88c551ef6d459832f585d9ddff5ab0bf42c9fd5b03dd40b41aa704ca1d0ac29b8aec24d9ac5c77be71a8a2110da4787cc31bedb34f6741d4394a23ece3733a28074cba9b46d576ebc4090c66fa2d267323c7e479f89fc7598003d6d802200d668d62edc9d941a1f8978e3e6f423ee7047ceecdfa90677d1ae0dcac3c19b5667df10dce6dcc7a9ca854ccfece5eedcb86e092d0f8c2732cbf314f5c4e34962c49ae56ced7d7e046decacac51649a111e21ede3611478410559cd0e8a93ac300410080aeae90ca44f7168a819bee025bd742ee0c48edfffaf0fc1d538eaea9d90b8849dd5651a329a3d6b6ed83e85221a77eb3766f378f4c311d58e4551b0d634200dd1758f6678a2c9eb38194323cb25903cc493736f9ff9da623e121640b25dcd2ef73d5d84883f55735ae1d972e463f0119d1047e53e57e113d373c81db368d2c5cf89b67533c949d71422aa9bf41f1b1dcaf89411f46dd5919a578c5ac64454b5b30b845a50f6eba65d513d914ba762d2351aa5c883010b3f86da72d16c4182ef7d9f0270d84efa684eb70d68a672d4a0fef13f78d516bb74b9e69616e40151cc6644d8116b024d819f33d73aa6774d628cc399322f84da7fa8946765f816270a39c636fc3285ab3493b5ce9860739f84f2ff414fd55108e03aa198b186e9cb4763026762f23b209ba89a476c3add20958cfd2cea8524902974b744b8b321ef9ed52183a3c8a1641d8645ec3d2574e238c351ad0ebfb88baabbf30908061cf922bf3442f6265f10f7cf7645373092f9751d349d96e27b33996b2b4d2913c310ab330328164075e324a14de97ec0ddcc67821fb130f305ce03bc58253f9339aea7d8c20a3faa2efe9ae31875d37051f22a8d6d8d6bb99a77c0a7c4b20810249d5e067202bfe72ce65cc1d6de09014390e30a0f87ad79b026deb328104aabf3539c33429ba50032704e746a48a85511932aeb3634a759025b40f6cb855aa99867984cf18b4a1b8b5f550d0162bfcc9cf8f998ad7fa5d9edb648ce7813cc6972c052a29e050e58bb0d8b943a905ed52703f0692210495df921908af931e0cb8ed0a6c7dd874adfb9cc2c399e0a164150a167ae64da50d70a9f454b42ee15420d29bf66696283db6b808ee84856c8f641369a1d94619b35fe050124bb8a85855f1fae1e63791dc72b33f68738bdf208238ef1360fe346d7a00bd6dcb2a9835314dd408681ccfe1fff02d1771ae2c62ea7d0997dfeb400d3a80f5f336411f3a7f6dd603224d3e31bba43f985c981a37f23d5c0d98a88a31c19432b8dcc830e7e152742ca468b1d84bd2511d6fa9671dc70f30fdf887651f6a85cca14811d657f942b0635973416d8604cdbf63f531ac8593957d7ab8191f2c2533ed3fdd3e2dde68fa243587ac993d1e3979d2d8b62c7ef806f0e5ceae9c250fe5df4a04e46b0b6c99b0213fb5e38d598f52bfb1afc68cc589fe901fdc85c230c361874770e63b4a5eda607fc53a04d82d3dcc96c5b78523d9f35e92ebf27740d38208d05922818708adc0d3550811423eb03366a26d73067ca0e8bc5131bc6f14c543e1aef31bf1c37e3aa06fd1b5d52f0aaab30c02cbb1a565a0eae2cfdee69f058cb75806f722365bee951b5209ed55edd54b2987ac466ab67ab7583c5d6fd2ebf79ee61a09dbdb600ea6d6be65b012f3d327e504850cfa8c00387a7875fedee0cb4b428e1d083a2c2755c7f4af2f3e31012479c7935a43e36944a4db7157769c8faa7a70517f650895a996cfa1ae5ca34486c4b74856355c83bc9861259fc0aaf564a37b7bd905b1f889ac4e7e9f1af7b98e5f6e94154522622548654605ca52718f0f93d5b1c13c71190590212ee84767e19ef9218b7a2bf213bab664f5d2a6e6aa9f77b93e864cdd4ae555bb49b0feb4111f5d360b974ae14a654fc301a2b614268da25c468e18e2385a2d22904a53b7606bef9b170cef5627c80870c2ac2c8b015d1a07c95500bc817fa96521026c1ceaba2afabcb5bc82aa85c1d590b3c3024e0392f41e4fd9e27edd1995e1466b0201ca3ca6687d05819c4ddfe06f977e044e7270637f78140246e7a67428fc59a470f8474866aea7e9d34e4060e8499b2d48cd7f81cabd4279a07bf4ed8a33f7f0f1241ee55ce1fcd278858e74644b425dd95fe2ec150ee935db7ae7b2c43a3eec918ebad4e289dcdbc7911ccdcbf5769633adbcfa33f937664639e6981f1531a15fc830943d31511be8024b04aed61c5924881806d1e40d8758658f65c42bf9b13a7ced96b7f0f8cbacb05fda2c3f2c22c6f3f68ca86858c6c8aa4e50ab19e26f1f5bcde7ecff3e0a45ed3e38b8368ae25a5bf4f9c04e287dfcb54329458d7c0a0b858b68a67bc429897d6adf29ce239bb815b1c4c96ca2c371b7fa6c28a9b7ae112704e84ca4cc6a5822023ed4ac49273943b763ef88086c8aedac72379a9551d2e11f74d4faf35e075e9c80a588a63ad283ace1805ac36ca99e336765c75f452467264557faaecce0c86ac5c822bdd87bda8cab079ce1ec9f6e9c9d8432dc7e3296df8becc5970394096463bee22b8b9592ea3a448868e3eecb71d47e0f359820c7d7d456f3dfb56e0257d7c0c9cdc1656903</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 面筋 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面筋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客诞生</title>
      <link href="2017/06/08/%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F/"/>
      <url>2017/06/08/%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<p>2017年6月8日，它诞生啦～<br>此刻正在上班，短小一篇，仅此纪念。</p><a id="more"></a><p>2021年5月17日，它重生啦~<br>需要再次维护起来，督促自己好好更新文章！</p>]]></content>
      
      
      <categories>
          
          <category> 感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便想想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
